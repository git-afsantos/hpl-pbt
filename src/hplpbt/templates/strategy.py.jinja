{# SPDX-License-Identifier: MIT #}
{# Copyright © 2023 André Santos #}

{##############################################################################}
{# RENDERING MACROS #}
{##############################################################################}


{# strategy: MessageStrategy #}
{% macro msg_strategy(strategy) -%}
@composite
def {{ strategy.name }}(draw) -> {{ strategy.return_type }}:
{% for statement in strategy.body[:-1] %}
{{ _statement(statement)|indent(4, first=true) }}
{% endfor %}
{% set statement = strategy.body[-1] %}
{% if statement.is_assignment and statement.variable == strategy.return_variable %}
    return {{ statement.expression }}
{% else %}
{{ _statement(statement)|indent(4, first=true) }}
    return {{ strategy.return_variable }}
{% endif %}
{% endmacro %}


{# strategy: MessageStrategy #}
{% macro trace_strategy(strategy) -%}
{% set return_type = 'RT_' ~ strategy.trace_name %}
{{ return_type }} = {{ strategy.get_return_type() }}


@composite
def {{ strategy.name }}(draw) -> List[{{ return_type }}]:
    # HPL property:
    # {{ strategy.hpl_property }}
{% for segment in strategy.segments %}
{{ _trace_segment(segment, loop.index)|indent(4, first=true) }}
{% endfor %}
    return []
{% endmacro %}


{##############################################################################}
{# HELPER MACROS #}
{##############################################################################}


{# statement: Statement #}
{% macro _statement(statement) -%}
{{ statement }}
{%- endmacro %}


{# segment: TraceSegmentStrategy #}
{# i: int #}
{% macro _trace_segment(segment, i) -%}
# trace segment {{ i }}
{{ _generate_spam(segment.spam) }}
{{ _generate_mandatory(segment.mandatory) }}
# ----------------
{%- endmacro %}


{# spam_strategies: Iterable[MessageStrategy] #}
{% macro _generate_spam(spam_strategies) -%}
{% set spam_names = spam_strategies|map(attribute='name')|unique|sort|list %}
{% if spam_names|length == 0 -%}
# (no spam messages)
{%- elif spam_names|length == 1 -%}
spam = draw(lists({{ spam_names[0] }}(), max_size=3))
{%- else -%}
spam_elements = one_of({{ spam_names|join('(), ') }}())
spam = draw(lists(spam_elements, max_size={{ 3 * spam_strategies|length }}))
{%- endif %}
{%- endmacro %}


{# mandatory_strategies: Iterable[MessageStrategy] #}
{% macro _generate_mandatory(mandatory_strategies) -%}
{% set mandatory_names = mandatory_strategies|map(attribute='name')|unique|sort|list %}
{% if mandatory_names|length == 0 -%}
# (no mandatory messages)
{%- elif mandatory_names|length == 1 -%}
msg = draw({{ mandatory_names[0] }}())
{%- else -%}
msg = draw(one_of({{ mandatory_names|join('(), ') }}()))
{%- endif %}
{%- endmacro %}
