{# SPDX-License-Identifier: MIT #}
{# Copyright © 2023 André Santos #}

{##############################################################################}
{# RENDERING MACROS #}
{##############################################################################}


{# strategy: MessageStrategy #}
{% macro msg_strategy(strategy) -%}
@composite
def {{ strategy.name }}(draw) -> {{ strategy.return_type }}:
{% for statement in strategy.body[:-1] %}
{{ _statement(statement)|indent(4, first=true) }}
{% endfor %}
{% set statement = strategy.body[-1] %}
{% if statement.is_assignment and statement.variable == strategy.return_variable %}
    return {{ statement.expression }}
{% else %}
{{ _statement(statement)|indent(4, first=true) }}
    return {{ strategy.return_variable }}
{% endif %}
{% endmacro %}


{# strategy: MessageStrategy #}
{% macro trace_strategy(strategy) -%}
{% set return_type = 'RT_' ~ strategy.trace_name %}
{{ return_type }} = TestMessage[{{ strategy.get_return_type() }}]


@composite
def {{ strategy.name }}(draw) -> List[{{ return_type }}]:
    # HPL property:
    # {{ strategy.hpl_property }}
    trace = []

{% for segment in strategy.segments %}
{{ _trace_segment(segment, loop.index)|indent(4, first=true) }}

{% endfor %}
    return trace
{% endmacro %}


{##############################################################################}
{# HELPER MACROS #}
{##############################################################################}


{# statement: Statement #}
{% macro _statement(statement) -%}
{{ statement }}
{%- endmacro %}


{# segment: TraceSegmentStrategy #}
{# i: int #}
{% macro _trace_segment(segment, i) -%}
# trace segment {{ i }}
{% if segment.has_timeout %}
delay = draw(floats(min_value={{ segment.delay }}, max_value={{ segment.timeout }}, exclude_max=True))
{% else %}
delay = draw(floats(min_value={{ segment.delay }}))
{% endif %}
{{ _generate_spam(segment.spam) }}
{{ _generate_mandatory(segment.mandatory) }}
{%- endmacro %}


{# spam: Iterable[TraceEvent] #}
{% macro _generate_spam(spam) -%}
{% if spam|length == 0 %}
# (no spam messages)
{% else %}
{% if spam|length == 1 -%}
{% set event = spam[0] %}
spam_elements = tuples(just('{{ event.channel }}'), {{ event.strategy.name }}())
{% else -%}
{% set spam = spam|sort(attribute='channel') %}
spam_elements = one_of(
{% for event in spam %}
    tuples(just('{{ event.channel }}'), {{ event.strategy.name }}()),
{% endfor %}
)
{% endif %}
spam = draw(lists(spam_elements, max_size={{ 3 * spam|length }}))
for channel, msg in spam:
    trace.append(TestMessage(channel, msg))
{%- endif %}
{%- endmacro %}


{# mandatory: Iterable[TraceEvent] #}
{% macro _generate_mandatory(mandatory) -%}
{% if mandatory|length == 0 -%}
# (no mandatory messages)
{%- elif mandatory|length == 1 -%}
{% set event = mandatory[0] %}
msg = draw({{ event.strategy.name }}())
trace.append(TestMessage('{{ event.channel }}', msg, delay=delay))
{%- else -%}
{% set mandatory = mandatory|sort(attribute='channel') %}
mandatory = one_of(
{% for event in mandatory %}
    tuples(just('{{ event.channel }}'), {{ event.strategy.name }}()),
{% endfor %}
)
channel, msg = draw(mandatory)
trace.append(TestMessage(channel, msg, delay=delay))
{%- endif %}
{%- endmacro %}
