{# SPDX-License-Identifier: MIT #}
{# Copyright © 2023 André Santos #}

{# input: imports: Iterable[Tuple[str, Iterable[str]]] #}
{# input: msg_strategies: Iterable[MessageStrategy] #}
{# input: trace_strategies: Iterable[TraceStrategy] #}
{# input: assumptions: Iterable[HplProperty] #}
{# input: behaviour: Iterable[HplProperty] #}

{##############################################################################}
{# IMPORTS #}
{##############################################################################}

{% import 'strategy.py.jinja' as S %}

{##############################################################################}
{# RENDERED CODE #}
{##############################################################################}

# SPDX-License-Identifier: MIT
# Copyright © 2023 André Santos

###############################################################################
# Properties
###############################################################################

# Assumptions
{% for property in assumptions|default(()) %}
# {{ property }}
{% else %}
# (none)
{% endfor %}

# Behaviour
{% for property in behaviour|default(()) %}
# {{ property }}
{% else %}
# (none)
{% endfor %}


###############################################################################
# Imports
###############################################################################

from typing import List, Union

from hypothesis import assume, given
from hypothesis.strategies import (
    booleans,
    composite,
    floats,
    integers,
    just,
    sampled_from,
    text,
)

{# from {{ pkg }} import {{ names|join(', ') }} #}
{% for pkg, names in imports %}
import {{ pkg }}
{% endfor %}

###############################################################################
# Message Strategies
###############################################################################


{% for strategy in msg_strategies|sort(attribute='name') %}
{{ S.msg_strategy(strategy) }}

{% endfor %}

###############################################################################
# Trace Strategies
###############################################################################

{% for strategy in trace_strategies|sort(attribute='name') %}
RT{{ loop.index }} = {{ strategy.get_return_type() }}


@composite
def gen_{{ strategy.name }}() -> List[RT{{ loop.index }}]:
    # HPL property:
    # {{ strategy.hpl_property }}
{% for segment in strategy.segments %}
    pass  # segment {{ loop.index }}
{% endfor %}
    return []


{% endfor %}
