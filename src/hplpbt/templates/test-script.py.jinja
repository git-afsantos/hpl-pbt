{# SPDX-License-Identifier: MIT #}
{# Copyright © 2023 André Santos #}

{# input: imports: Iterable[Tuple[str, Iterable[str]]] #}
{# input: msg_strategies: Iterable[MessageStrategy] #}
{# input: trace_strategies: Iterable[TraceStrategy] #}
{# input: assumptions: Iterable[HplProperty] #}
{# input: behaviour: Iterable[HplProperty] #}

{##############################################################################}
{# IMPORTS #}
{##############################################################################}

{% import 'strategy.py.jinja' as S %}

{##############################################################################}
{# RENDERED CODE #}
{##############################################################################}

# SPDX-License-Identifier: MIT
# Copyright © 2023 André Santos

###############################################################################
# Properties
###############################################################################

# Assumptions
{% for property in assumptions|default(()) %}
# {{ property }}
{% else %}
# (none)
{% endfor %}

# Behaviour
{% for property in behaviour|default(()) %}
# {{ property }}
{% else %}
# (none)
{% endfor %}


###############################################################################
# Imports
###############################################################################

from typing import Any, Callable, Generic, List, Union, TypeVar

from dataclasses import dataclass
import time

from hypothesis import assume, given
from hypothesis.strategies import (
    booleans,
    composite,
    floats,
    integers,
    lists,
    just,
    one_of,
    sampled_from,
    text,
    tuples,
)

{# from {{ pkg }} import {{ names|join(', ') }} #}
{% for pkg, names in imports %}
import {{ pkg }}
{% endfor %}

###############################################################################
# Message Strategies
###############################################################################


{% for strategy in msg_strategies|sort(attribute='name') %}
{{ S.msg_strategy(strategy) }}

{% endfor %}

###############################################################################
# Trace Strategies
###############################################################################

T = TypeVar('T')


@dataclass
class TestMessage(Generic[T]):
    channel: str
    data: T
    delay: float = 0.0

{% for strategy in trace_strategies|sort(attribute='name') %}
{{ S.trace_strategy(strategy) }}

{% endfor %}
###############################################################################
# Entry Point
###############################################################################


def noop():
    pass

{% for strategy in trace_strategies|sort(attribute='name') %}
{% set return_type = 'RT_' ~ strategy.trace_name %}
@given(trace={{ strategy.name }}())
def run_tests_{{ strategy.trace_name }}(
    trace: List[{{ return_type }}],
    send: Callable[[str, Any], None],
    sleep: Callable[[float], None] = time.sleep,
    setup: Callable[[], None] = noop,
    teardown: Callable[[], None] = noop,
):
    setup()
    for msg in trace:
        if msg.delay > 0.0:
            sleep(msg.delay)
        if msg.channel:
            send(msg.channel, msg.data)
    teardown()

{% endfor %}
